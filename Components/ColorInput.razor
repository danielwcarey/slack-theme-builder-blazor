@using System.Drawing
<div class="color-input">
    <label class="color-input-label" for=@InputIdColorPicker>
        @InputLabel
    </label>
    <div class="color-input-wrapper">
        <input class="color-picker-input"
               type="color"
               id=@InputIdColorPicker
               value="@ColorHex"
               @onchange="DoColorChangeEvent" />
        <label class="custom-color-picker-input"
               for=@InputIdColorPicker
               data-color=@ColorHex
               style=" --background-color: @ColorHex" />
        <input class="color-text-input"
               id=@InputId
               type="text"
               value="@ColorHex"
               @onchange="DoColorChangeEvent" />
    </div>
</div>

@code {
    [Parameter]
    public string InputLabel { get; set; } = "";

    [Parameter]
    public string InputId { get; set; } = "";

    
    private Color _color;
    [Parameter]
    public Color Color { get => _color; set => _color = value; }

    private Color _initialColor { get; set; }

    [Parameter]
    public EventCallback<Color> ColorChanged { get; set; }

    protected override void OnInitialized() {
        _initialColor = Color;
    }


    private void DoColorChange() {
        if (ColorChanged.HasDelegate) ColorChanged.InvokeAsync(Color);
    }

    // Workaround for
    // [Two way binding does not yet handle color picker...](https://github.com/dotnet/aspnetcore/issues/10376)
    private void DoColorChangeEvent(ChangeEventArgs args) {
        try {
            Color = ColorTranslator.FromHtml(args.Value as string);
            DoColorChange();
        } catch (System.ArgumentException exc) {
            
            // todo: Need to provide feedback as to why it failed and revert
            ColorHex = "#000000";
        }
    }

    private string InputIdColorPicker { get => $"{InputId}ColorPicker"; }

    private string ColorHex {
        get => ColorTranslator.ToHtml(Color);
        set => Color = ColorTranslator.FromHtml(value);
    }

}
